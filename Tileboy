jimport React, { useState, useRef, useEffect, useCallback } from 'react';
import { Palette, Grid, Layers, Save, FolderOpen, Play, Code, Sparkles, Wand } from 'lucide-react'; // Icons

const TILE_SIZE = 32;
const GRID_COLS = 20;
const GRID_ROWS = 15;

// Main App component for the Conceptual Tile Editor
const App = () => {
  const canvasRef = useRef(null);
  const [selectedTile, setSelectedTile] = useState('grass'); // Currently selected tile for drawing
  const [mapData, setMapData] = useState(() => {
    // Initialize map with empty tiles
    const initialMap = [];
    for (let r = 0; r < GRID_ROWS; r++) {
      initialMap.push(Array(GRID_COLS).fill('empty'));
    }
    return initialMap;
  });
  const [message, setMessage] = useState(''); // For displaying messages (e.g., AI output)

  // Simulated Tile Palette
  const tilePalette = {
    grass: { color: '#8BC34A', emoji: 'ðŸŒ¿' },
    water: { color: '#2196F3', emoji: 'ðŸ’§' },
    dirt: { color: '#795548', emoji: 'ðŸŸ«' },
    stone: { color: '#607D8B', emoji: 'ðŸª¨' },
    tree: { color: '#4CAF50', emoji: 'ðŸŒ³' },
    empty: { color: '#333333', emoji: 'â¬œ' },
  };

  // Function to draw the map on the canvas
  const drawMap = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');

    // Set canvas dimensions responsively
    const containerWidth = canvas.parentElement.clientWidth;
    canvas.width = Math.min(containerWidth, GRID_COLS * TILE_SIZE);
    canvas.height = GRID_ROWS * TILE_SIZE;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    mapData.forEach((row, rIdx) => {
      row.forEach((tileType, cIdx) => {
        const tileInfo = tilePalette[tileType];
        if (tileInfo) {
          ctx.fillStyle = tileInfo.color;
          ctx.fillRect(cIdx * TILE_SIZE, rIdx * TILE_SIZE, TILE_SIZE, TILE_SIZE);
          // Draw emoji for visual clarity
          ctx.font = `${TILE_SIZE * 0.8}px Arial`;
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.fillText(tileInfo.emoji, cIdx * TILE_SIZE + TILE_SIZE / 2, rIdx * TILE_SIZE + TILE_SIZE / 2);
        }
        // Draw grid lines
        ctx.strokeStyle = '#555';
        ctx.strokeRect(cIdx * TILE_SIZE, rIdx * TILE_SIZE, TILE_SIZE, TILE_SIZE);
      });
    });
  }, [mapData, tilePalette]);

  // Handle drawing on the canvas
  const handleCanvasClick = useCallback((event) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const col = Math.floor(x / TILE_SIZE);
    const row = Math.floor(y / TILE_SIZE);

    if (row >= 0 && row < GRID_ROWS && col >= 0 && col < GRID_COLS) {
      setMapData(prevMapData => {
        const newMapData = prevMapData.map(r => [...r]); // Deep copy
        newMapData[row][col] = selectedTile;
        return newMapData;
      });
    }
  }, [selectedTile]);

  useEffect(() => {
    drawMap();
  }, [mapData, drawMap]);

  // Handle window resize to redraw canvas
  useEffect(() => {
    window.addEventListener('resize', drawMap);
    return () => window.removeEventListener('resize', drawMap);
  }, [drawMap]);

  // Simulate AI-driven level generation
  const handleGenerateLevelAI = () => {
    setMessage('Main Manager AI (Orchestrator) is generating a level...');
    setTimeout(() => {
      const newMap = [];
      for (let r = 0; r < GRID_ROWS; r++) {
        const row = [];
        for (let c = 0; c < GRID_COLS; c++) {
          // Simple procedural generation (AI could be much smarter)
          if (r < GRID_ROWS / 3) {
            row.push('water');
          } else if (r < GRID_ROWS / 3 * 2) {
            row.push(Math.random() < 0.8 ? 'grass' : 'dirt');
          } else {
            row.push(Math.random() < 0.9 ? 'dirt' : 'stone');
          }
        }
        newMap.push(row);
      }
      setMapData(newMap);
      setMessage('Level generated by Game Template & Logic Design AI!');
    }, 2000);
  };

  // Simulate AI suggesting tile variations
  const handleSuggestTilesAI = () => {
    setMessage('Asset Generation AI is suggesting tile variations...');
    setTimeout(() => {
      // In a real scenario, this would add new tile types to `tilePalette` state
      setMessage('New "cracked_dirt" and "mossy_stone" tile variations suggested by Asset Generation AI (conceptual).');
    }, 1500);
  };

  // Simulate AI refining Lua game logic
  const handleRefineLuaLogicAI = () => {
    setMessage('Code Generation & Refinement AI is refining Lua game logic...');
    setTimeout(() => {
      setMessage('Lua game logic for tile interactions refined and optimized by Code Generation AI (conceptual).');
    }, 2500);
  };

  const handleClearMap = () => {
    setMapData(prev => prev.map(row => row.map(() => 'empty')));
    setMessage('Map cleared.');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black text-gray-100 p-6 font-sans">
      <div className="max-w-6xl mx-auto bg-gray-800 rounded-xl shadow-2xl p-8 border border-gray-700">
        <h1 className="text-4xl font-extrabold text-center text-emerald-400 mb-8 tracking-wide">
          <Wand className="inline-block mr-3 text-emerald-500" size={36} /> Conceptual Serverless Lua Tile Editor
        </h1>

        <p className="text-gray-300 text-center mb-6 text-lg">
          This simulates a tile editor where AI agents collaborate to build pixel worlds.
          Lua logic for tile behaviors, procedural generation, and custom tools would run client-side.
        </p>

        {/* Message Display */}
        {message && (
          <div className="mb-6 p-4 bg-blue-900 text-blue-200 rounded-lg shadow-md flex items-center">
            <Sparkles className="mr-3" size={20} />
            {message}
          </div>
        )}

        <div className="flex flex-col lg:flex-row gap-6 mb-8">
          {/* Tile Palette */}
          <div className="lg:w-1/4 p-4 bg-gray-700 rounded-xl shadow-lg border border-gray-600">
            <h2 className="text-xl font-bold text-yellow-300 mb-4 flex items-center">
              <Palette className="mr-2" size={20} /> Tile Palette
            </h2>
            <div className="grid grid-cols-3 gap-2">
              {Object.entries(tilePalette).map(([key, value]) => (
                <button
                  key={key}
                  onClick={() => setSelectedTile(key)}
                  className={`p-2 rounded-lg text-4xl transform transition duration-200 ease-in-out
                              ${selectedTile === key ? 'ring-4 ring-yellow-400 scale-105' : 'hover:scale-105'}
                              bg-gray-600 hover:bg-gray-500`}
                  style={{ backgroundColor: value.color }}
                >
                  {value.emoji}
                  <span className="block text-xs mt-1 text-gray-100 font-semibold capitalize">{key}</span>
                </button>
              ))}
            </div>
            <p className="text-gray-400 text-sm mt-4">Selected: <span className="font-semibold text-white capitalize">{selectedTile}</span></p>
          </div>

          {/* Canvas and AI Actions */}
          <div className="lg:w-3/4 flex-grow p-4 bg-gray-700 rounded-xl shadow-lg border border-gray-600 flex flex-col items-center">
            <h2 className="text-xl font-bold text-pink-300 mb-4 flex items-center">
              <Grid className="mr-2" size={20} /> Map Canvas
            </h2>
            <canvas
              ref={canvasRef}
              onClick={handleCanvasClick}
              className="border-2 border-gray-600 bg-gray-900 cursor-pointer rounded-lg shadow-inner max-w-full h-auto"
              style={{
                width: '100%',
                maxWidth: `${GRID_COLS * TILE_SIZE}px`,
                height: `${GRID_ROWS * TILE_SIZE}px`,
              }}
            />

            {/* AI-Driven Actions */}
            <div className="mt-6 w-full space-y-3">
              <h3 className="text-lg font-bold text-purple-300 mb-2 flex items-center">
                <Sparkles className="mr-2" size={20} /> AI-Powered Actions
              </h3>
              <button
                onClick={handleGenerateLevelAI}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center"
              >
                <Play className="mr-2" size={20} /> Generate Level (AI)
              </button>
              <button
                onClick={handleSuggestTilesAI}
                className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center"
              >
                <Layers className="mr-2" size={20} /> Suggest Tile Variations (AI)
              </button>
              <button
                onClick={handleRefineLuaLogicAI}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center"
              >
                <Code className="mr-2" size={20} /> Refine Lua Game Logic (AI)
              </button>
            </div>
          </div>
        </div>

        {/* Standard Editor Actions */}
        <div className="bg-gray-700 p-6 rounded-xl shadow-lg border border-gray-600">
          <h2 className="text-xl font-bold text-gray-300 mb-4 flex items-center">
            <Save className="mr-2" size={20} /> Editor Actions
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center"
              onClick={() => setMessage('Map saved (conceptual, would export Lua table/JSON)!')}
            >
              <Save className="mr-2" size={20} /> Save Map
            </button>
            <button
              className="w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center"
              onClick={() => setMessage('Map loaded (conceptual, would import Lua table/JSON)!')}
            >
              <FolderOpen className="mr-2" size={20} /> Load Map
            </button>
            <button
              className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 flex items-center justify-center"
              onClick={handleClearMap}
            >
              <Grid className="mr-2" size={20} /> Clear Map
            </button>
          </div>
          <div className="mt-6 p-4 bg-gray-900 rounded-lg text-gray-300 text-sm">
            <h3 className="font-semibold text-white mb-2">Conceptual Lua Integration Notes:</h3>
            <ul className="list-disc list-inside space-y-1">
              <li>**Tile Logic:** Each tile type could have an associated Lua script defining its behavior (e.g., `tile_grass.lua` with `on_step()` function).</li>
              <li>**Procedural Generation:** The "Generate Level (AI)" function would conceptually trigger a Lua script (perhaps generated by the Designer AI) to populate `mapData`.</li>
              <li>**Custom Brushes:** Advanced brushes could be defined in Lua, allowing for intelligent placement patterns.</li>
              <li>**Map Export:** Saving the map would involve converting `mapData` into a Lua table format for direct use in a Lua-based game engine.</li>
              <li>**AI Interaction:** The AI agents (Designer, Asset, Code) would generate or refine Lua code/data, which this editor would then consume or allow the user to visualize and interact with.</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;

